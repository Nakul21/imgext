
const settingsButton = document.getElementById('settingsButton');
const settingsMenu = document.getElementById('settingsMenu');

function toggleSettingsMenu() {
    settingsMenu.style.display = settingsMenu.style.display === 'none' ? 'block' : 'none';
}

function toggleDebugMode() {
    debugMode = debugToggle.checked;
    
    if (debugMode) {
        previewCanvas.style.display = 'block';
    } else {
        previewCanvas.style.display = 'none';
    }

    resetUI();
}

function resetUI() {
    captureButton.style.display = 'inline-block';
    actionButtons.style.display = 'none';
    confirmButton.style.display = 'none';
    retryButton.style.display = 'none';
    resultElement.style.display = 'none';
    apiResponseElement.style.display = 'none';
    resultElement.textContent = '';
    apiResponseElement.textContent = '';
    imageDataUrl = '';
    extractedText = '';
    extractedData = [];
    clearCanvas();
    
    if (debugMode) {
        previewCanvas.style.display = 'block';
    } else {
        previewCanvas.style.display = 'none';
    }
}

async function handleCapture() {
    disableCaptureButton();
    showLoading('Processing image...');

    await ensureModelsLoaded();


    try {
        extractedData = await detectAndRecognizeText(img);
        extractedText = extractedData.map(item => item.word).join(' ');
        resultElement.textContent = `Extracted Text: ${extractedText}`;
        resultElement.style.display = 'block';
        
        captureButton.style.display = 'none';
        
        if (debugMode) {
            previewCanvas.style.display = 'block';
            confirmButton.style.display = 'inline-block';
            retryButton.style.display = 'inline-block';
        } else {
            actionButtons.style.display = 'block';
        }
    } catch (error) {
        console.error('Error during text extraction:', error);
        resultElement.textContent = 'Error occurred during text extraction';
        resultElement.style.display = 'block';
        resetUI();
    } finally {
        enableCaptureButton();
        hideLoading();
        tf.disposeVariables();
    }
}

async function handleSend() {
    if (!extractedText) return;
    apiResponseElement.textContent = 'Submitting...';
    apiResponseElement.style.display = 'block';
    let msgKey = new Date().getTime();
    try {
        
        apiResponseElement.textContent = 'Submitted the extract with ID : ' + msgKey;
        
    } catch (error) {
        console.error('Error submitting to server:', error);
        apiResponseElement.textContent = 'Error occurred while submitting to server';
    } finally {
        setTimeout(() => {
            resetUI();
            apiResponseElement.style.display = 'none';
        }, 3000);
    }
}


// Event Listeners
settingsButton.addEventListener('click', toggleSettingsMenu);
captureButton.addEventListener('click', handleCapture);
captureButton.addEventListener('touchstart', handleCapture);
confirmButton.addEventListener('click', handleConfirm);
confirmButton.addEventListener('touchstart', handleConfirm);
retryButton.addEventListener('click', handleRetry);
retryButton.addEventListener('touchstart', handleRetry);
sendButton.addEventListener('click', handleSend);
sendButton.addEventListener('touchstart', handleSend);
discardButton.addEventListener('click', resetUI);
discardButton.addEventListener('touchstart', resetUI);
debugToggle.addEventListener('change', toggleDebugMode);

// Initialize the application
init();

