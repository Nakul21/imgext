async function detectAndRecognizeText(imageElement) {
    const size = [512, 512];
    const heatmapCanvas = await getHeatMapFromImage(imageElement);
    boundingBoxes = extractBoundingBoxesFromHeatmap(heatmapCanvas, size);
    console.log('extractBoundingBoxesFromHeatmap', boundingBoxes);

    previewCanvas.width = imageElement.width;
    previewCanvas.height = imageElement.height;
    const ctx = previewCanvas.getContext('2d');
    ctx.drawImage(imageElement, 0, 0);

    let fullText = '';
    const crops = [];
    const extractedWords = [];

    // Limit the number of bounding boxes processed on mobile
    const maxBoxes = isMobile() ? 10 : boundingBoxes.length;
    for (let i = 0; i < Math.min(maxBoxes, boundingBoxes.length); i++) {
        const box = boundingBoxes[i];
        // Draw bounding box
        const [x1, y1] = box.coordinates[0];
        const [x2, y2] = box.coordinates[2];
        const width = (x2 - x1) * imageElement.width;
        const height = (y2 - y1) * imageElement.height;
        const x = x1 * imageElement.width;
        const y = y1 * imageElement.height;

        ctx.strokeStyle = box.config.stroke;
        ctx.lineWidth = 2;
        ctx.strokeRect(x, y, width, height);

        // Create crop
        const croppedCanvas = document.createElement('canvas');
        croppedCanvas.width = width;
        croppedCanvas.height = height;
        croppedCanvas.getContext('2d').drawImage(
            imageElement, 
            x, y, width, height,
            0, 0, width, height
        );

        crops.push(croppedCanvas);
    }

    // Process crops in smaller batches on mobile
    const batchSize = isMobile() ? 4 : 32;
    for (let i = 0; i < crops.length; i += batchSize) {
        const batch = crops.slice(i, i + batchSize);
        const inputTensor = preprocessImageForRecognition(batch);

        try {
            console.log('Input tensor shape:', inputTensor.shape);
            
            // Use lower precision on mobile
            const predictions = await recognitionModel.executeAsync(inputTensor, {
                precision: isMobile() ? 'low' : 'high'
            });

            console.log('Raw model output:', predictions);
            console.log('Model output type:', typeof predictions);
            console.log('Model output shape:', predictions.shape);

            let probabilities;
            if (Array.isArray(predictions)) {
                console.log('Model output is an array');
                probabilities = tf.softmax(predictions[0], -1);
            } else if (predictions instanceof tf.Tensor) {
                console.log('Model output is a tensor');
                probabilities = tf.softmax(predictions, -1);
            } else {
                throw new Error('Unexpected output format from recognition model');
            }

            console.log('Probabilities shape:', probabilities.shape);

            const bestPath = tf.argMax(probabilities, -1);
            console.log('Best path shape:', bestPath.shape);
            
            const words = decodeText(bestPath);
            console.log('Decoded words:', words);

            fullText += words + ' ';

            // Store extracted words for each bounding box
            for (let j = 0; j < batch.length; j++) {
                extractedWords.push({
                    boundingBox: boundingBoxes[i + j],
                    text: words
                });
            }

            tf.dispose([inputTensor, predictions, probabilities, bestPath]);
        } catch (error) {
            console.error('Error processing batch:', error);
            console.error('Error stack:', error.stack);
            // Continue with the next batch
        }
    }
    
    return { fullText: fullText.trim(), extractedWords };
}

function decodeText(bestPath) {
    const blank = 126;
    let collapsed = "";
    let lastChar = null;

    const values = bestPath.dataSync();
    for (const k of values) {
        if (k !== blank && k !== lastChar) {
            if (collapsed.length > 0 && !VOCAB[k].match(/[.,!?;:]/)) {
                collapsed += ' '; // Add space before new word
            }
            collapsed += VOCAB[k];
            lastChar = k;
        } else if (k === blank) {
            lastChar = null;
        }
    }
    return collapsed.trim();
}

// Add this helper function to safely log tensor information
function logTensorInfo(tensor, name) {
    console.log(`${name}:`);
    console.log('  Shape:', tensor.shape);
    console.log('  Dtype:', tensor.dtype);
    try {
        const data = tensor.dataSync();
        console.log('  First few values:', data.slice(0, 10));
    } catch (error) {
        console.log('  Unable to access data synchronously');
    }
}
